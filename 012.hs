#!/usr/bin/env stack
{- stack runghc --resolver lts-6.0 --package primes -} 
{- https://projecteuler.net/problem=12
Problem 12
Highly divisible triangular number

The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

 1: 1
 3: 1,3
 6: 1,2,3,6
10: 1,2,5,10
15: 1,3,5,15
21: 1,3,7,21
28: 1,2,4,7,14,28

We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred divisors?
-}

import qualified Data.Numbers.Primes as DNP (primes)
import qualified Data.List as DL (group)

-- Alternative (less intuitive) definition: scanl1 (+) [1..] 
triangleNumbers :: (Integral a) => [a]
triangleNumbers = 1 : zipWith (+) [2..] triangleNumbers 

primeFactors :: (Integral a) => a -> [a]
primeFactors 1 = []
primeFactors n = factor : primeFactors (n `quot` factor)
   where factor = head . filter divides $ DNP.primes
         divides x = n `rem` x == 0

divisorCount :: (Integral a) => a -> Int
divisorCount = product . map ((+ 1) . length) . DL.group . primeFactors

main :: IO ()
main = print . head . filter ((> 500) . divisorCount) $ triangleNumbers 
